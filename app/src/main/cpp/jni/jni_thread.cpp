/* DO NOT EDIT THIS FILE - it is machine generated */
#include <base.h>
/* Header for class com_example_ndk_jni_JniThread */

#include <pthread.h>
#include <unistd.h>
#include <queue>
// #include <time.h>
// #include <time64.h>

#ifndef _Included_com_example_ndk_jni_JniThread
#define _Included_com_example_ndk_jni_JniThread
#ifdef __cplusplus
extern "C" {
#endif

struct ThreadRunArgs {
    int id;
    int result;
};

void *printThreadHello(void *) {
    LOGE("hello thread");
    // 耗时操作
    return nullptr;
}

void *printThreadWithArgs(void *arg) {
    auto *args = static_cast<ThreadRunArgs *>(arg);
    LOGE("thread id is %d", args->id);
    LOGE("thread result is %d", args->result);
    return nullptr;
}

void *printThreadJoin(void *arg) {
    auto *args = static_cast<ThreadRunArgs *>(arg);
    struct timeval begin{};

    gettimeofday(&begin, nullptr);

    LOGE("start time is %ld", begin.tv_sec);
    sleep(3);

    struct timeval end{};
    gettimeofday(&end, nullptr);
    LOGE("end time is %ld", end.tv_sec);

    LOGE("time used is %ld", end.tv_sec - begin.tv_sec);

    return reinterpret_cast<void *>(args->result);
}

/*
 * Class:     com_example_ndk_jni_JniThread
 * Method:    createNativeThread
 * Signature: ()V
 */
JNIEXPORT jstring JNICALL Java_com_example_ndk_jni_JniThread_createNativeThread
        (JNIEnv *env, jobject clazz) {

    // 创建线程
    pthread_t handle;

    jint ret = pthread_create(&handle, nullptr, printThreadHello, nullptr);
    // 线程创建成功
    if (ret == 0) {
        return env->NewStringUTF("create thread success...");
    }
    // 线程创建失败
    return env->NewStringUTF("create thread failed...");
}

/*
 * Class:     com_example_ndk_jni_JniThread
 * Method:    createNativeThreadWithArgs
 * Signature: ()V
 */
JNIEXPORT jstring JNICALL Java_com_example_ndk_jni_JniThread_createNativeThreadWithArgs
        (JNIEnv *env, jobject clazz) {
    auto *args = new ThreadRunArgs;
    args->id = 2;
    args->result = 110;

    pthread_t handle;
    jint ret = pthread_create(&handle, nullptr, printThreadWithArgs, args);
    // 线程创建成功
    if (ret == 0) {
        return env->NewStringUTF("create thread with args success...");
    }
    // 线程创建失败
    return env->NewStringUTF("create thread with args failed...");
}

/*
 * Class:     com_example_ndk_jni_JniThread
 * Method:    joinNativeThread
 * Signature: ()V
 */
JNIEXPORT jstring JNICALL Java_com_example_ndk_jni_JniThread_joinNativeThread
        (JNIEnv *env, jobject clazz) {
    auto *args = new ThreadRunArgs;
    args->id = 2;
    args->result = 110;

    pthread_t handle;
    jint result = pthread_create(&handle, nullptr, printThreadJoin, args);

    void *ret = nullptr;

    pthread_join(handle, &ret);

    // 线程创建成功
    if (result == 0) {
        return env->NewStringUTF("join thread with args success...");
    }
    // 线程创建失败
    return env->NewStringUTF("join thread with args failed...");
}

#ifdef __cplusplus
}
#endif
#endif
