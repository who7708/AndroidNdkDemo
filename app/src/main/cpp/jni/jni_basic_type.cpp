/* DO NOT EDIT THIS FILE - it is machine generated */
#include <base.h>
/* Header for class com_example_ndk_jni_JniBasicType */

#ifndef _Included_com_example_ndk_jni_JniBasicType
#define _Included_com_example_ndk_jni_JniBasicType
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeInt
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeInt
        (JNIEnv *env, jobject jobj, jint num) {
    LOGE("java int value is %d", num);
    const int c_num = num * 2;
    return c_num;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeByte
 * Signature: (B)B
 */
JNIEXPORT jbyte JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeByte
        (JNIEnv *env, jobject jobj, jbyte b) {
    LOGE("java byte value is %d", b);
    jbyte c_byte = b + (jbyte) 10;
    return c_byte;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeChar
 * Signature: (C)C
 */
JNIEXPORT jchar JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeChar
        (JNIEnv *env, jobject jobj, jchar ch) {
    LOGE("java char value is %c", ch);
    const int c_num = ch + 1;
    return c_num;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeShort
 * Signature: (S)S
 */
JNIEXPORT jshort JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeShort
        (JNIEnv *env, jobject jobj, jshort sh) {
    LOGE("java short value is %d", sh);
    const auto c_short = sh * 10;
    return c_short;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeLong
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeLong
        (JNIEnv *env, jobject jobj, jlong lon) {
    LOGE("java long value is %lld", lon);
    const auto c_long = lon * 10;
    return c_long;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeFloat
 * Signature: (F)F
 */
JNIEXPORT jfloat JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeFloat
        (JNIEnv *env, jobject jobj, jfloat f) {
    LOGE("java float value is %f", f);
    const auto c_float = f * 10;
    return c_float;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeDouble
 * Signature: (D)D
 */
JNIEXPORT jdouble JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeDouble
        (JNIEnv *env, jobject jobj, jdouble d) {
    LOGE("java float value is %f", d);
    const auto c_double = d * 10;
    return c_double;
}

/*
 * Class:     com_example_ndk_jni_JniBasicType
 * Method:    callNativeBoolean
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_com_example_ndk_jni_JniBasicType_callNativeBoolean
        (JNIEnv *env, jobject jobj, jboolean b) {
    LOGE("java boolean value is %d", b);
    const auto c_boolean = !b;
    return c_boolean;
}

#ifdef __cplusplus
}
#endif
#endif
