/* DO NOT EDIT THIS FILE - it is machine generated */
#include <base.h>
/* Header for class com_example_ndk_jni_JniException */

#ifndef _Included_com_example_ndk_jni_JniException
#define _Included_com_example_ndk_jni_JniException
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_ndk_jni_JniException
 * Method:    nativeInvokeJavaException
 * Signature: ()V
 */
JNIEXPORT jint JNICALL Java_com_example_ndk_jni_JniException_nativeInvokeJavaException
        (JNIEnv *env, jobject clazz) {
    jclass cls = env->FindClass("com/example/ndk/jni/JniException");
    jmethodID operation_method = env->GetMethodID(cls, "operation", "()I");

    jmethodID constructor_method = env->GetMethodID(cls, "<init>", "()V");

    jobject obj = env->NewObject(cls, constructor_method);

    jint ret = env->CallIntMethod(obj, operation_method);

    jthrowable throwable = env->ExceptionOccurred();
    if (throwable) {
        // 打印异常信息
        env->ExceptionDescribe();
        // 清除异常信息
        env->ExceptionClear();
        return -1;
    }
    return ret;
}

/*
 * Class:     com_example_ndk_jni_JniException
 * Method:    nativeThrowException
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_example_ndk_jni_JniException_nativeThrowException
        (JNIEnv *env, jobject clazz) {
    jclass cls = env->FindClass("java/lang/IllegalArgumentException");

    // 向java中抛出异常
    env->ThrowNew(cls, "native exception");
}

#ifdef __cplusplus
}
#endif
#endif
