/* DO NOT EDIT THIS FILE - it is machine generated */
#include <base.h>
/* Header for class com_example_ndk_jni_JniBitmap */
#include <android/bitmap.h>
#include <cstring>

#ifndef _Included_com_example_ndk_jni_JniBitmap
#define _Included_com_example_ndk_jni_JniBitmap
#ifdef __cplusplus
extern "C" {
#endif

jobject generateBitmap(JNIEnv *env, int newWidth, int newHeight) {
    // 获取 bitmap class
    jclass cls = env->FindClass("android/graphics/Bitmap");

    // 获取 bitmap constructor
    jmethodID constructor_method = env->GetMethodID(cls, "<init>", "()V");

    // 调用 constructor， 生成 bitmap 对象
    jobject bitmap = env->NewObject(cls, constructor_method);

    // 获取 setWidth、setHeight 方法
    jmethodID width = env->GetMethodID(cls, "setWidth", "(I)V");
    jmethodID height = env->GetMethodID(cls, "setHeight", "(I)V");

    // 调用 setWidth、setHeight 方法， 设置对应值
    env->CallVoidMethod(bitmap, width, newWidth);

    env->CallVoidMethod(bitmap, height, newHeight);

    // 返回对象
    return bitmap;
}
/*
 * Class:     com_example_ndk_jni_JniBitmap
 * Method:    callNativeMirrorBitmap
 * Signature: (Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;
 */
JNIEXPORT jobject JNICALL Java_com_example_ndk_jni_JniBitmap_callNativeMirrorBitmap2
        (JNIEnv *env, jobject clazz, jobject bitmap) {
    AndroidBitmapInfo bitmapInfo;
    AndroidBitmap_getInfo(env, bitmap, &bitmapInfo);

    LOGE("width is %d", bitmapInfo.width);
    LOGE("height is %d", bitmapInfo.height);

    void *bitmapPixels;

    AndroidBitmap_lockPixels(env, bitmap, &bitmapPixels);

    uint32_t newWidth = bitmapInfo.width;
    uint32_t newHeight = bitmapInfo.height;

    auto *newBitmapPixels = new uint32_t[newWidth * newHeight];

    int whereToGet = 0;
    for (uint32_t y = 0; y < newHeight; y++) {
        for (uint32_t x = newWidth - 1; x >= 0; x--) {
            uint32_t pixel = ((uint32_t *) bitmapPixels)[whereToGet++];
            newBitmapPixels[newWidth * y + x] = pixel;
        }
    }

    AndroidBitmap_unlockPixels(env, bitmap);

    jobject newBitmap = generateBitmap(env, newWidth, newHeight);

    void *resultBitmapPixels;

    AndroidBitmap_lockPixels(env, newBitmap, &resultBitmapPixels);

    memcpy((uint32_t *) resultBitmapPixels, newBitmapPixels,
           sizeof(uint32_t) * newWidth * newHeight);

    AndroidBitmap_unlockPixels(env, newBitmap);

    delete[] newBitmapPixels;

    return newBitmap;
}

JNIEXPORT jobject JNICALL Java_com_example_ndk_jni_JniBitmap_callNativeMirrorBitmap
        (JNIEnv *env, jobject clazz, jobject bitmap) {
    jclass matrix_clazz = env->FindClass("android/graphics/Matrix");

    jmethodID matrix_constructor = env->GetMethodID(matrix_clazz, "<init>", "()V");

    jobject matrix = env->NewObject(matrix_clazz, matrix_constructor);

    jmethodID scale_method = env->GetMethodID(matrix_clazz, "setScale", "(FF)V");
    env->CallVoidMethod(matrix, scale_method, -1.0f, 1.0f);

    AndroidBitmapInfo bitmapInfo;
    AndroidBitmap_getInfo(env, bitmap, &bitmapInfo);

    LOGE("width is %d", bitmapInfo.width);
    LOGE("height is %d", bitmapInfo.height);

    jclass bitmap_clazz = env->FindClass("android/graphics/Bitmap");
    jmethodID create_bitmap = env->GetStaticMethodID(bitmap_clazz, "createBitmap",
                                                     "(Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;");

    jint width = bitmapInfo.width;
    jint height = bitmapInfo.height;

    return env->CallStaticObjectMethod(bitmap_clazz, create_bitmap, bitmap, 0, 0, width, height,
                                       matrix,
                                       true);
}

#ifdef __cplusplus
}
#endif
#endif
